#type VERTEX
#version 330 core

layout (location = 0) in vec3 vertices;
layout (location = 1) in vec2 textures;
layout (location = 2) in vec3 normals;

uniform mat3 inverseNormals;

uniform mat4 transformation;
uniform mat4 projection;
uniform mat4 view;

out vec3 vertexNormal;
out vec2 vertexTexture;
out vec3 fragmentPosition;

void main()
{
    vec4 position = transformation * vec4(vertices, 1.0);

    gl_Position = projection * view * position;

    vertexNormal = inverseNormals * normals;
    vertexTexture = textures;
    fragmentPosition = position.xyz;
}

#type FRAGMENT
#version 330 core

const float DIRECTIONAL_LIGHT = 1;
const float POINT_LIGHT = 2;
const float SPOT_LIGHT = 3;

in vec3 vertexNormal;
in vec2 vertexTexture;
in vec3 fragmentPosition;

out vec4 outColor;

struct Material
{
    vec3 diffuse;
    vec3 specular;
    float reflectance;

    sampler2D diffuseMap;
    sampler2D specularMap;

    float hasDiffuseMap;
    float hasSpecularMap;
};

struct Light
{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    vec3 position;
    vec3 direction;

    float constant;
    float linear;
    float quadratic;

    float cutoff;
    float outerCutoff;

    float type;
};

uniform Light light;
uniform Material material;

uniform vec3 viewPosition;

vec3 pointLight(Light light, vec3 specularColor, vec3 diffuseColor, float diff, float spec, vec3 fragmentPosition);
vec3 spotLight(Light light, vec3 lightDirection, vec3 specularColor, vec3 diffuseColor, float diff, float spec);
vec3 directionalLight(Light light, vec3 specularColor, vec3 diffuseColor, float diff, float spec);


vec3 directionalLight(Light light, vec3 specularColor, vec3 diffuseColor, float diff, float spec)
{
    vec3 ambient = light.ambient * diffuseColor;
    vec3 diffuse = light.diffuse * diff * diffuseColor;
    vec3 specular = light.specular * spec * specularColor;
    return (ambient + diffuse + specular);
}

vec3 pointLight(Light light, vec3 specularColor, vec3 diffuseColor, float diff, float spec, vec3 fragmentPosition)
{
    // attenuation
    float distance = length(light.position - fragmentPosition);
    float attenuation = 1.0 / (light.constant + light.linear * distance +
    light.quadratic * (distance * distance));

    // combine results
    vec3 ambient = light.ambient * diffuseColor;
    vec3 diffuse = light.diffuse * diff * diffuseColor;
    vec3 specular = light.specular * spec * specularColor;

    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;

    return (ambient + diffuse + specular);
}

vec3 spotLight(Light light, vec3 lightDirection, vec3 specularColor, vec3 diffuseColor, float diff, float spec)
{
    float theta = dot(lightDirection, normalize(-light.direction));
    float epsilon = (light.cutoff - light.outerCutoff);
    float intensity = clamp((theta - light.outerCutoff) / epsilon, 0.0, 1.0);

    vec3 ambient = light.ambient * diffuseColor;
    vec3 diffuse = light.diffuse * diff * diffuseColor;
    vec3 specular = light.specular * spec * specularColor;

    diffuse *= intensity;
    specular *= intensity;

    return (ambient + diffuse + specular);
}

void main()
{
    vec4 diffuseColor = vec4(0.0);
    vec4 specularColor = vec4(0.0);
    vec3 result = vec3(0.0);

    diffuseColor = (material.hasDiffuseMap == 1.0) ?
        texture(material.diffuseMap, vertexTexture) : vec4(material.diffuse, 1.0);

    specularColor =  (material.hasSpecularMap == 1.0) ?
        texture(material.specularMap, vertexTexture) : vec4(material.specular, 1.0);

    vec3 norm = normalize(vertexNormal);
    vec3 lightDirection = (light.type == DIRECTIONAL_LIGHT) ?
        normalize(-light.direction) : normalize(light.position - fragmentPosition);

    float diffuseStrength = max(dot(norm, lightDirection), 0.0);
    vec3 viewDirection = normalize(viewPosition - fragmentPosition);
    vec3 reflectDirection = reflect(-lightDirection, norm);
    float specularStrength = pow(max(dot(viewDirection, reflectDirection), 0.0), material.reflectance);

    if(light.type == DIRECTIONAL_LIGHT)
        result += directionalLight(light, specularColor, diffuseColor, diffuseStrength, specularStrength);

    if(light.type == POINT_LIGHT)
        result += pointLight(light, specularColor, diffuseColor, diffuseStrength, specularStrength, fragmentPosition);

    if(light.type == SPOT_LIGHT)
        result += spotLight(light, lightDirection, specularColor, diffuseColor, diffuseStrength, specularStrength);

    outColor = vec4(result, 1.0);
}
